import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

/**
 * Script para gerar e popular o campo displayTitle na tabela JourneyOptionFlow
 * 
 * Uso: npx ts-node src/scripts/generateJourneyTitles.ts
 */

function generateDisplayTitle(text: string): string {
  // Remover retic√™ncias e pontua√ß√£o
  let processed = text
    .replace(/\.\.\./g, '')
    .replace(/\?/g, '')
    .trim();

  // Padr√µes comuns de transforma√ß√£o
  const patterns = [
    { from: /^as complexidades (.+)$/i, to: 'Filmes que exploram $1' },
    { from: /^explore (.+)$/i, to: 'Filmes que exploram $1' },
    { from: /^te envolva em (.+)$/i, to: 'Filmes de $1' },
    { from: /^te prenda com (.+)$/i, to: 'Filmes com $1' },
    { from: /^mergulhe (.+)$/i, to: 'Filmes que mergulham em $1' },
    { from: /^revele (.+)$/i, to: 'Filmes que revelam $1' },
    { from: /^ofere√ßa (.+)$/i, to: 'Filmes que oferecem $1' },
    { from: /^uma explora√ß√£o (.+)$/i, to: 'Filmes com uma explora√ß√£o de $1' },
    { from: /^uma an√°lise (.+)$/i, to: 'Filmes com uma an√°lise de $1' },
    { from: /^um mergulho (.+)$/i, to: 'Filmes com um mergulho em $1' },
    { from: /^(.+) e (.+)$/i, to: 'Filmes sobre $1 e $2' },
  ];

  for (const pattern of patterns) {
    const match = processed.match(pattern.from);
    if (match) {
      return processed.replace(pattern.from, pattern.to);
    }
  }

  // Fallback: adicionar prefixo gen√©rico
  return `Filmes sobre ${processed}`;
}

async function generateJourneyTitles() {
  try {
    console.log('üé¨ GERANDO T√çTULOS PARA JORNADAS EMOCIONAIS');
    console.log('=============================================');
    console.log('');

    // Buscar todas as jornadas
    const journeys = await prisma.journeyOptionFlow.findMany({
      orderBy: { id: 'asc' }
    });

    console.log(`üìä Total de jornadas encontradas: ${journeys.length}`);
    console.log('');

    let updatedCount = 0;
    let skippedCount = 0;

    // Processar cada jornada
    for (const journey of journeys) {
      console.log(`\nüîç Processando Jornada ID: ${journey.id}`);
      console.log(`   üìù Text: ${journey.text}`);

      // Verificar se j√° tem displayTitle
      if (journey.displayTitle && journey.displayTitle.trim() !== '') {
        console.log(`   ‚ö†Ô∏è  DisplayTitle j√° existe: "${journey.displayTitle}"`);
        console.log(`   ‚è≠Ô∏è  Pulando...`);
        skippedCount++;
        continue;
      }

      // Gerar t√≠tulo
      const generatedTitle = generateDisplayTitle(journey.text);
      console.log(`   ‚ú® T√≠tulo gerado: "${generatedTitle}"`);

      // Atualizar no banco
      await prisma.journeyOptionFlow.update({
        where: { id: journey.id },
        data: { displayTitle: generatedTitle }
      });

      console.log(`   ‚úÖ Atualizado com sucesso!`);
      updatedCount++;
    }

    console.log('');
    console.log('=============================================');
    console.log('üéâ PROCESSAMENTO CONCLU√çDO!');
    console.log('=============================================');
    console.log(`‚úÖ Jornadas atualizadas: ${updatedCount}`);
    console.log(`‚è≠Ô∏è  Jornadas puladas: ${skippedCount}`);
    console.log(`üìä Total processado: ${journeys.length}`);
    console.log('');
    console.log('üìù Pr√≥ximos passos:');
    console.log('   1. Revisar os t√≠tulos gerados no Supabase');
    console.log('   2. Ajustar manualmente se necess√°rio');
    console.log('   3. Executar novamente se quiser regenerar (apague os t√≠tulos primeiro)');
    console.log('');

    // Mostrar preview dos t√≠tulos gerados
    console.log('üìã PREVIEW DOS T√çTULOS GERADOS:');
    console.log('================================');
    const updatedJourneys = await prisma.journeyOptionFlow.findMany({
      where: {
        displayTitle: { not: null }
      },
      orderBy: { id: 'asc' },
      select: {
        id: true,
        displayTitle: true,
        text: true
      }
    });

    updatedJourneys.forEach(j => {
      console.log(`\nID ${j.id}:`);
      console.log(`  Original: ${j.text}`);
      console.log(`  Gerado: ${j.displayTitle}`);
    });

  } catch (error) {
    console.error('‚ùå Erro ao gerar t√≠tulos:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Executar o script
generateJourneyTitles();
