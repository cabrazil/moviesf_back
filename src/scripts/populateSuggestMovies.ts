import { PrismaClient } from '@prisma/client';
import { validateMovieSentiments } from './validateMovieSentiments';
import { searchMovie } from './populateMovies';
import axios from 'axios';

const prisma = new PrismaClient();

interface JourneyStep {
  stepId: number;
  optionId: number;
}

interface JourneyPath {
  mainSentimentId: number;
  mainSentimentName: string;
  journeyFlowId: number;
  steps: JourneyStep[];
}

interface JourneyOptionFlowSubSentiment {
  subSentimentId: number;
  weight: number;
}

interface OpenAIResponse {
  choices: Array<{
    message: {
      content: string;
    };
  }>;
}

async function generateReflectionWithOpenAI(movie: any, keywords: string[]): Promise<string> {
  const prompt = `
Sinopse: ${movie.overview}
G√™neros: ${movie.genres.map((g: any) => g.name).join(', ')}
Palavras-chave: ${keywords.join(', ')}

Com base nessas informa√ß√µes, escreva uma reflex√£o curta, inspiradora e √∫nica sobre o filme, conectando os temas principais e o impacto emocional da hist√≥ria. 
A reflex√£o deve ter no m√°ximo 30 palavras e terminar com um ponto final.
N√£o repita o nome do filme.
`;

  try {
    const response = await axios.post<OpenAIResponse>(
      'https://api.openai.com/v1/chat/completions',
      {
        model: 'gpt-3.5-turbo',
        messages: [
          {
            role: 'system',
            content: 'Voc√™ √© um cr√≠tico de cinema especializado em an√°lise emocional de filmes.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.7,
        max_tokens: 100
      },
      {
        headers: {
          'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
          'Content-Type': 'application/json'
        }
      }
    );

    return response.data.choices[0].message.content.trim();
  } catch (error) {
    console.error('Erro ao gerar reflex√£o:', error);
    return 'Filme que explora temas profundos e emocionais.';
  }
}

async function validateJourneyPath(
  movieId: string,
  journeyPath: JourneyPath
): Promise<boolean> {
  try {
    // 1. Validar se o filme existe
    const movie = await prisma.movie.findUnique({
      where: { id: movieId }
    });

    if (!movie) {
      console.log(`‚ùå Filme n√£o encontrado: ${movieId}`);
      return false;
    }

    // 2. Validar se o filme tem sentimentos compat√≠veis com o MainSentiment
    const movieSentiments = await validateMovieSentiments({
      mainSentiment: journeyPath.mainSentimentName,
      movieTitle: movie.title,
      year: movie.year || undefined,
      flow: 'genre',
      genre: movie.genres.join(', ')
    });

    if (!movieSentiments.success) {
      console.log(`‚ùå Filme n√£o tem sentimentos compat√≠veis com ${journeyPath.mainSentimentName}`);
      return false;
    }

    // 3. Validar cada passo da jornada
    for (const step of journeyPath.steps) {
      // 3.1 Buscar a op√ß√£o escolhida
      const option = await prisma.journeyOptionFlow.findUnique({
        where: { id: step.optionId }
      });

      if (!option) {
        console.log(`‚ùå Op√ß√£o n√£o encontrada: ${step.optionId}`);
        return false;
      }

      // Validar apenas a √∫ltima op√ß√£o da jornada
      if (step !== journeyPath.steps[journeyPath.steps.length - 1]) {
        console.log(`\n‚è≠Ô∏è Pulando valida√ß√£o da op√ß√£o: ${option.text}`);
        continue;
      }

      console.log(`\nValidando √∫ltima op√ß√£o da jornada: ${option.text}`);

      // 3.2.1 Valida√ß√£o espec√≠fica para obras aclamadas pela cr√≠tica (optionId 135)
      if (step.optionId === 135) {
        console.log('\nüîç Validando se o filme √© uma obra aclamada pela cr√≠tica...');
        
        // Buscar dados do filme no TMDB para verificar avalia√ß√µes
        const tmdbMovie = await searchMovie(movie.title, movie.year || undefined);
        if (!tmdbMovie) {
          console.log('‚ùå Filme n√£o encontrado no TMDB para valida√ß√£o de cr√≠tica');
          return false;
        }

        // Verificar se o filme tem uma boa avalia√ß√£o (acima de 7.0 no TMDB)
        const tmdbRating = tmdbMovie.movie.vote_average || 0;
        const tmdbVoteCount = tmdbMovie.movie.vote_count || 0;
        const popularity = tmdbMovie.movie.popularity || 0;
        
        console.log(`üìä Avalia√ß√£o TMDB: ${tmdbRating}/10 (${tmdbVoteCount} votos)`);
        console.log(`üìà Popularidade: ${popularity}`);
        
        // Crit√©rios para obra aclamada pela cr√≠tica:
        // 1. Avalia√ß√£o acima de 7.0 no TMDB E pelo menos 1000 votos
        // 2. OU avalia√ß√£o acima de 7.5 no TMDB (mesmo com menos votos)
        // 3. OU alta popularidade (> 50) com boa avalia√ß√£o (> 6.5)
        // 4. OU ser um filme cl√°ssico/antigo com boa reputa√ß√£o
        
        const isHighRated = tmdbRating >= 7.0 && tmdbVoteCount >= 1000;
        const isVeryHighRated = tmdbRating >= 7.5;
        const isPopularAndWellRated = popularity > 50 && tmdbRating >= 6.5;
        const isClassic = movie.year && movie.year < 1990 && tmdbRating >= 7.0;
        
        const isCriticallyAcclaimed = isHighRated || isVeryHighRated || isPopularAndWellRated || isClassic;
        
        if (!isCriticallyAcclaimed) {
          console.log(`‚ùå Filme n√£o atende aos crit√©rios de obra aclamada pela cr√≠tica`);
          console.log(`   - Avalia√ß√£o alta + votos: ${isHighRated ? '‚úÖ' : '‚ùå'} (${tmdbRating}/10, ${tmdbVoteCount} votos)`);
          console.log(`   - Avalia√ß√£o muito alta: ${isVeryHighRated ? '‚úÖ' : '‚ùå'} (${tmdbRating}/10)`);
          console.log(`   - Popular e bem avaliado: ${isPopularAndWellRated ? '‚úÖ' : '‚ùå'} (popularidade: ${popularity}, avalia√ß√£o: ${tmdbRating})`);
          console.log(`   - Cl√°ssico: ${isClassic ? '‚úÖ' : '‚ùå'} (ano: ${movie.year}, avalia√ß√£o: ${tmdbRating})`);
          return false;
        }
        
        console.log(`‚úÖ Filme validado como obra aclamada pela cr√≠tica!`);
        if (isHighRated) console.log(`   - Motivo: Alta avalia√ß√£o (${tmdbRating}/10) com muitos votos (${tmdbVoteCount})`);
        if (isVeryHighRated) console.log(`   - Motivo: Avalia√ß√£o excepcional (${tmdbRating}/10)`);
        if (isPopularAndWellRated) console.log(`   - Motivo: Alta popularidade (${popularity}) com boa avalia√ß√£o (${tmdbRating}/10)`);
        if (isClassic) console.log(`   - Motivo: Filme cl√°ssico (${movie.year}) com boa reputa√ß√£o (${tmdbRating}/10)`);
      }

      // 3.2 Buscar os SubSentiments associados √† op√ß√£o
      const optionSubSentiments = await prisma.journeyOptionFlowSubSentiment.findMany({
        where: {
          journeyOptionFlowId: step.optionId
        }
      });

      // Buscar detalhes dos SubSentiments
      const subSentimentDetails = await prisma.subSentiment.findMany({
        where: {
          id: {
            in: optionSubSentiments.map(jofss => jofss.subSentimentId)
          }
        }
      });

      // console.log('\nDebug - SubSentiments da op√ß√£o:', JSON.stringify({
      //   optionSubSentiments,
      //   subSentimentDetails
      // }, null, 2));

      // 3.3 Validar se o filme tem os SubSentiments da op√ß√£o
      const movieSubSentiments = await prisma.movieSentiment.findMany({
        where: {
          movieId: movieId,
          subSentimentId: {
            in: optionSubSentiments.map(jofss => jofss.subSentimentId)
          }
        }
      });

      // Buscar detalhes dos SubSentiments do filme
      const movieSubSentimentDetails = await prisma.subSentiment.findMany({
        where: {
          id: {
            in: movieSubSentiments.map(mss => mss.subSentimentId)
          }
        }
      });

      // console.log('\nDebug - SubSentiments do filme:', JSON.stringify({
      //   movieSubSentiments,
      //   movieSubSentimentDetails
      // }, null, 2));  

      if (movieSubSentiments.length === 0) {
        console.log(`‚ùå Filme n√£o tem SubSentiments compat√≠veis com a op√ß√£o: ${option.text}`);
        return false;
      }

      // 3.4 Calcular score baseado nos pesos
      const totalScore = movieSubSentiments.reduce((acc, mss) => {
        const optionWeight = optionSubSentiments.find(
          jofss => jofss.subSentimentId === mss.subSentimentId
        )?.weight || 0;
        return acc + Number(optionWeight);
      }, 0);

      // 3.5 Definir threshold m√≠nimo para considerar v√°lido
      const threshold = 0.5;
      if (totalScore < threshold) {
        console.log(`‚ùå Score insuficiente para a op√ß√£o: ${option.text} (score: ${totalScore})`);
        return false;
      }

      console.log(`‚úÖ √öltima op√ß√£o validada com sucesso: ${option.text}`);
    }

    // 4. Se passou por todas as valida√ß√µes, adicionar √† MovieSuggestionFlow
    const movieDetails = await prisma.movie.findUnique({
      where: { id: movieId },
      include: {
        movieSentiments: {
          include: {
            subSentiment: true
          }
        }
      }
    });

    if (!movieDetails) {
      console.log('‚ùå Detalhes do filme n√£o encontrados');
      return false;
    }

    // Buscar filme no TMDB para obter mais detalhes
    const tmdbMovie = await searchMovie(movieDetails.title, movieDetails.year || undefined);
    if (!tmdbMovie) {
      console.log('‚ùå Filme n√£o encontrado no TMDB');
      return false;
    }

    // Gerar reflex√£o usando OpenAI
    const keywords = movieDetails.movieSentiments
      .flatMap(ms => ms.subSentiment.keywords)
      .filter((value, index, self) => self.indexOf(value) === index);

    const movieKeywords = [
      ...keywords,
      // Keywords extras para Sete Vidas
      "culpa", "arrependimento", "remorso", "peso na consci√™ncia",
      "busca por reden√ß√£o", "necessidade de perd√£o", "expia√ß√£o",
      "repara√ß√£o", "sacrif√≠cio pessoal", "autoflagela√ß√£o",
      "penit√™ncia", "busca por paz interior", "reden√ß√£o",
      "transforma√ß√£o pessoal", "busca por significado",
      "supera√ß√£o", "resgate", "salva√ß√£o", "altru√≠smo",
      "compaix√£o", "empatia", "solidariedade", "generosidade",
      "doa√ß√£o", "entrega"
    ];

    // console.log(`\nDebug - Keywords do filme: ${JSON.stringify(movieKeywords, null, 2)}`);

    const reason = await generateReflectionWithOpenAI(tmdbMovie.movie, movieKeywords);

    await prisma.movieSuggestionFlow.create({
      data: {
        movieId: movieId,
        journeyOptionFlowId: journeyPath.steps[journeyPath.steps.length - 1].optionId,
        reason: reason,
        relevance: 1
      }
    });

    console.log(`‚úÖ Filme ${movieDetails.title} adicionado com sucesso √† jornada!`);
    return true;

  } catch (error) {
    console.error('Erro ao validar jornada:', error);
    return false;
  }
}

// Exemplo de uso
async function main() {
  const journeyPath: JourneyPath = {
    mainSentimentId: 15, // Calmo(a)
    mainSentimentName: "Calmo(a)",
    journeyFlowId: 4,
    steps: [
      {
        stepId: 20, // primeiro passo da jornada Calmo(a)
        optionId: 70 // op√ß√£o "distra√ß√£o leve e agrad√°vel"
      },
      {
        stepId: 22, // segundo passo ap√≥s a op√ß√£o escolhida
        optionId: 78 // op√ß√£o "com√©dia com humor suave"
      }
    ]
  };

  // Testar com o filme "Like Crazy"
  const movieId = "65f8d0b1-2e01-41e4-98e8-bacbed083601";
  await validateJourneyPath(movieId, journeyPath);
}

main()
  .catch(console.error)
  .finally(() => prisma.$disconnect()); 