import { prismaApp as prisma } from '../prisma';
import * as fs from 'fs';
import * as path from 'path';

// Interface para Google Translate API
interface TranslateResponse {
  data: {
    translations: Array<{
      translatedText: string;
    }>;
  };
}

// Fun√ß√£o para traduzir texto usando Google Translate API
async function translateText(text: string): Promise<string> {
  const apiKey = process.env.GOOGLE_TRANSLATE_API_KEY;
  
  if (!apiKey) {
    throw new Error('GOOGLE_TRANSLATE_API_KEY n√£o encontrada no .env');
  }

  try {
    const response = await fetch(`https://translation.googleapis.com/language/translate/v2?key=${apiKey}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        q: text,
        target: 'pt',
        source: 'en'
      })
    });

    if (!response.ok) {
      throw new Error(`Erro na API de tradu√ß√£o: ${response.status}`);
    }

    const data: TranslateResponse = await response.json();
    let translatedText = data.data.translations[0].translatedText;
    
    // Limpar caracteres HTML/entidades
    translatedText = translatedText
      .replace(/&quot;/g, '"')
      .replace(/&amp;/g, '&')
      .replace(/&lt;/g, '<')
      .replace(/&gt;/g, '>')
      .replace(/&apos;/g, "'")
      .replace(/&#39;/g, "'")
      .replace(/&nbsp;/g, ' ');
    
    return translatedText;
  } catch (error) {
    console.error('‚ùå Erro ao traduzir texto:', error);
    return text; // Retorna texto original em caso de erro
  }
}

// Fun√ß√£o para buscar filme por t√≠tulo original e ano
async function findMovieByTitleAndYear(originalTitle: string, year: number) {
  try {
    const movie = await prisma.movie.findFirst({
      where: {
        original_title: {
          equals: originalTitle,
          mode: 'insensitive'
        },
        year: year
      }
    });

    return movie;
  } catch (error) {
    console.error('‚ùå Erro ao buscar filme:', error);
    return null;
  }
}

// Fun√ß√£o para gerar URL da cr√≠tica
function generateQuoteUrl(originalTitle: string): string {
  // Converter t√≠tulo para formato URL (lowercase, espa√ßos para h√≠fens, remover caracteres especiais)
  const urlTitle = originalTitle
    .toLowerCase()
    .replace(/\s+/g, '-')
    .replace(/[^\w\-]/g, '')
    .replace(/-+/g, '-')
    .replace(/^-|-$/g, '')
    .replace(/-/g, '_'); // Trocar h√≠fens por underscores para Rotten Tomatoes
  
  return `https://www.rottentomatoes.com/m/${urlTitle}/reviews?type=top_critics`;
}

// Fun√ß√£o para processar uma se√ß√£o de cr√≠tica
async function processQuoteSection(section: string, movieId: string, originalTitle: string): Promise<void> {
  const lines = section.trim().split('\n').filter(line => line.trim() !== '');
  
  if (lines.length < 3) {
    console.log('‚ö†Ô∏è Se√ß√£o muito curta, pulando...');
    return;
  }

  // Extrair dados da se√ß√£o
  const author = lines[0]?.trim();
  const vehicle = lines[1]?.trim();
  
  // Encontrar o texto da cr√≠tica (pular linhas de metadados)
  let textStartIndex = 2;
  while (textStartIndex < lines.length && 
         (lines[textStartIndex].includes('TOP CRITIC') || 
          lines[textStartIndex].includes('Fresh score') ||
          lines[textStartIndex].includes('Full Review'))) {
    textStartIndex++;
  }

  // Filtrar linhas que come√ßam com "Full Review" e linhas vazias
  const filteredLines = lines.slice(textStartIndex).filter(line => {
    const trimmedLine = line.trim();
    return trimmedLine !== '' && !trimmedLine.startsWith('Full Review');
  });

  const text = filteredLines.join(' ').trim();
  
  if (!text) {
    console.log('‚ö†Ô∏è Nenhum texto encontrado na se√ß√£o, pulando...');
    return;
  }

  console.log(`   üìù Processando cr√≠tica de: ${author} (${vehicle})`);
  console.log(`   üìÑ Texto original: ${text.substring(0, 100)}...`);

  // Traduzir texto
  const translatedText = await translateText(text);
  console.log(`   üåê Texto traduzido: ${translatedText.substring(0, 100)}...`);

  // Gerar URL da cr√≠tica
  const quoteUrl = generateQuoteUrl(originalTitle);
  console.log(`   üîó URL gerada: ${quoteUrl}`);

  // Verificar se cita√ß√£o j√° existe e fazer upsert
  try {
    // Buscar cita√ß√£o existente
    const existingQuote = await prisma.quote.findFirst({
      where: {
        movieId: movieId,
        author: author,
        vehicle: vehicle
      }
    });

    let quote;
    if (existingQuote) {
      // Atualizar cita√ß√£o existente
      quote = await prisma.quote.update({
        where: { id: existingQuote.id },
        data: {
          text: translatedText,
          url: quoteUrl
        }
      });
      console.log(`   üîÑ Cita√ß√£o atualizada com ID: ${quote.id}`);
    } else {
      // Criar nova cita√ß√£o
      quote = await prisma.quote.create({
        data: {
          movieId: movieId,
          author: author,
          vehicle: vehicle,
          text: translatedText,
          url: quoteUrl
        }
      });
      console.log(`   ‚úÖ Cita√ß√£o criada com ID: ${quote.id}`);
    }
  } catch (error) {
    console.error(`   ‚ùå Erro ao processar cita√ß√£o:`, error);
  }
}

// Fun√ß√£o principal
async function processQuotesData(filename: string) {
  console.log('üìö PROCESSANDO DADOS DE CITA√á√ïES');
  console.log('==================================================');

  try {
    // Ler arquivo
    const filePath = path.join(process.cwd(), filename);
    const fileContent = fs.readFileSync(filePath, 'utf-8');
    
    console.log(`üìÅ Arquivo lido: ${filename}`);
    console.log(`üìä Tamanho: ${fileContent.length} caracteres`);

    // Extrair t√≠tulo e ano da primeira linha
    const lines = fileContent.split('\n');
    const firstLine = lines[0]?.trim();
    
    if (!firstLine) {
      throw new Error('Primeira linha do arquivo est√° vazia');
    }

    // Parse do t√≠tulo e ano: "1917 (2019)"
    const titleYearMatch = firstLine.match(/^(.+?)\s*\((\d{4})\)$/);
    if (!titleYearMatch) {
      throw new Error(`Formato inv√°lido na primeira linha: ${firstLine}`);
    }

    const originalTitle = titleYearMatch[1].trim();
    const year = parseInt(titleYearMatch[2]);

    console.log(`üé¨ Filme: ${originalTitle}`);
    console.log(`üìÖ Ano: ${year}`);

    // Buscar filme no banco
    const movie = await findMovieByTitleAndYear(originalTitle, year);
    if (!movie) {
      throw new Error(`Filme "${originalTitle}" (${year}) n√£o encontrado no banco`);
    }

    console.log(`‚úÖ Filme encontrado: ${movie.title} (${movie.original_title})`);
    console.log(`üÜî Movie ID: ${movie.id}`);

    // Processar se√ß√µes (separadas por *)
    const sections = fileContent.split('*').slice(1); // Pular primeira se√ß√£o (t√≠tulo)
    
    console.log(`üìä Total de se√ß√µes encontradas: ${sections.length}`);

    for (let i = 0; i < sections.length; i++) {
      const section = sections[i];
      if (section.trim()) {
        console.log(`\nüéØ PROCESSANDO SE√á√ÉO ${i + 1}/${sections.length}`);
        await processQuoteSection(section, movie.id, originalTitle);
      }
    }

    console.log('\n‚úÖ PROCESSAMENTO CONCLU√çDO!');
    console.log(`üìä Total de cita√ß√µes processadas: ${sections.length}`);

  } catch (error) {
    console.error('‚ùå Erro durante o processamento:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

// Executar script se chamado diretamente
if (require.main === module) {
  const filename = process.argv[2];
  
  if (!filename) {
    console.error('‚ùå Uso: npx ts-node src/scripts/processQuotesData.ts <arquivo>');
    console.error('   Exemplo: npx ts-node src/scripts/processQuotesData.ts quotes.txt');
    process.exit(1);
  }

  processQuotesData(filename);
}

export { processQuotesData };
