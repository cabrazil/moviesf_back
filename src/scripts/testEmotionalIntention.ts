import { PrismaClient } from '@prisma/client';
import { EmotionalIntention, getIntentionConfig } from './emotionalIntentionSystem';

const prisma = new PrismaClient();

async function testEmotionalIntentionSystem() {
  console.log('üß† === TESTE DO SISTEMA DE INTEN√á√ÉO EMOCIONAL ===\n');

  // Cen√°rio 1: Usu√°rio est√° triste e quer PROCESSAR a tristeza
  console.log('üé≠ CEN√ÅRIO 1: Usu√°rio TRISTE que quer PROCESSAR a tristeza');
  console.log('---------------------------------------------------');
  
  const processConfig = getIntentionConfig('Triste / Melanc√≥lico(a)', EmotionalIntention.PROCESS);
  if (processConfig) {
    console.log(`üìù Descri√ß√£o: ${processConfig.description}`);
    console.log(`üé¨ G√™neros preferidos: ${processConfig.journeyModifications.preferredGenres.join(', ')}`);
    console.log(`üö´ G√™neros evitados: ${processConfig.journeyModifications.avoidGenres.join(', ')}`);
    console.log(`üéµ Tom emocional: ${processConfig.journeyModifications.emotionalTone}`);
    console.log('üìä SubSentimentos valorizados:');
    Object.entries(processConfig.journeyModifications.subSentimentWeights).forEach(([name, weight]) => {
      console.log(`   - ${name}: ${weight}`);
    });
  }
  
  console.log('\n' + '='.repeat(80) + '\n');

  // Cen√°rio 2: Usu√°rio est√° triste e quer TRANSFORMAR o estado
  console.log('üé≠ CEN√ÅRIO 2: Usu√°rio TRISTE que quer TRANSFORMAR o estado');
  console.log('------------------------------------------------------');
  
  const transformConfig = getIntentionConfig('Triste / Melanc√≥lico(a)', EmotionalIntention.TRANSFORM);
  if (transformConfig) {
    console.log(`üìù Descri√ß√£o: ${transformConfig.description}`);
    console.log(`üé¨ G√™neros preferidos: ${transformConfig.journeyModifications.preferredGenres.join(', ')}`);
    console.log(`üö´ G√™neros evitados: ${transformConfig.journeyModifications.avoidGenres.join(', ')}`);
    console.log(`üéµ Tom emocional: ${transformConfig.journeyModifications.emotionalTone}`);
    console.log('üìä SubSentimentos valorizados:');
    Object.entries(transformConfig.journeyModifications.subSentimentWeights).forEach(([name, weight]) => {
      console.log(`   - ${name}: ${weight}`);
    });
  }

  console.log('\n' + '='.repeat(80) + '\n');

  // Demonstra√ß√£o de como isso mudaria as recomenda√ß√µes
  console.log('üí° IMPACTO NAS RECOMENDA√á√ïES:');
  console.log('-----------------------------');
  
  console.log('üë§ Usu√°rio triste + PROCESSAR:');
  console.log('   ‚úÖ "Her" (2013) - Drama sobre solid√£o e conex√£o');
  console.log('   ‚úÖ "Manchester by the Sea" (2016) - Drama sobre luto');
  console.log('   ‚ùå "Vingadores" (2012) - A√ß√£o/aventura');
  console.log('   ‚ùå "Gente Grande" (2010) - Com√©dia');
  
  console.log('\nüë§ Usu√°rio triste + TRANSFORMAR:');
  console.log('   ‚úÖ "Divertida Mente" (2015) - Anima√ß√£o sobre emo√ß√µes');
  console.log('   ‚úÖ "A Fant√°stica F√°brica de Chocolate" (2005) - Musical/fantasia');
  console.log('   ‚ùå "R√©quiem para um Sonho" (2000) - Drama pesado');
  console.log('   ‚ùå "Cisne Negro" (2010) - Thriller psicol√≥gico');

  console.log('\n' + '='.repeat(80) + '\n');

  // Buscar filmes reais do banco para demonstrar
  console.log('üé¨ TESTE COM FILMES REAIS DO BANCO:');
  console.log('----------------------------------');

  try {
    // Buscar alguns filmes para teste
    const movies = await prisma.movie.findMany({
      take: 5,
      include: {
        movieSentiments: {
          include: {
            subSentiment: true
          }
        }
      }
    });

    console.log(`üìä Encontrados ${movies.length} filmes para teste:\n`);

    movies.forEach((movie, index) => {
      console.log(`${index + 1}. "${movie.title}" (${movie.year})`);
      console.log(`   G√™neros: ${movie.genres.join(', ')}`);
      console.log(`   SubSentimentos: ${movie.movieSentiments.length}`);
      
      // Simular como seria a compatibilidade com diferentes inten√ß√µes
      const movieGenres = movie.genres || [];
      
      // Para PROCESSAR tristeza
      const processGenres = processConfig?.journeyModifications.preferredGenres || [];
      const processMatch = movieGenres.some(genre => 
        processGenres.some(preferred => 
          genre.toLowerCase().includes(preferred.toLowerCase())
        )
      );
      
      // Para TRANSFORMAR tristeza
      const transformGenres = transformConfig?.journeyModifications.preferredGenres || [];
      const transformMatch = movieGenres.some(genre => 
        transformGenres.some(preferred => 
          genre.toLowerCase().includes(preferred.toLowerCase())
        )
      );
      
      console.log(`   üí≠ Compatibilidade:`);
      console.log(`      PROCESSAR tristeza: ${processMatch ? '‚úÖ' : '‚ùå'}`);
      console.log(`      TRANSFORMAR tristeza: ${transformMatch ? '‚úÖ' : '‚ùå'}`);
      console.log('');
    });

  } catch (error) {
    console.error('Erro ao buscar filmes:', error);
  }

  console.log('üéØ CONCLUS√ÉO:');
  console.log('O sistema de Inten√ß√£o Emocional permite que o mesmo usu√°rio');
  console.log('no mesmo estado emocional receba recomenda√ß√µes completamente');
  console.log('diferentes baseadas na sua INTEN√á√ÉO com aquele sentimento.');
  console.log('');
  console.log('Isso resolve o problema de ambiguidade emocional mencionado!');
}

// Fun√ß√£o para demonstrar integra√ß√£o com a jornada existente
async function demonstrateJourneyIntegration() {
  console.log('\nüîó === INTEGRA√á√ÉO COM JORNADA EXISTENTE ===\n');

  console.log('üí° FLUXO PROPOSTO:');
  console.log('------------------');
  console.log('1. Usu√°rio seleciona sentimento: "Triste / Melanc√≥lico(a)"');
  console.log('2. üÜï NOVA PERGUNTA: "O que voc√™ gostaria de fazer com essa tristeza?"');
  console.log('   a) Processar e elaborar esse sentimento');
  console.log('   b) Mudar para um estado mais positivo');
  console.log('   c) Aceitar e ficar em sintonia com ela');
  console.log('   d) Explorar diferentes aspectos dela');
  console.log('');
  console.log('3. Sistema adapta a jornada baseado na inten√ß√£o escolhida');
  console.log('4. Recomenda√ß√µes s√£o filtradas e priorizadas conforme a inten√ß√£o');
  
  console.log('\nüìã IMPLEMENTA√á√ÉO SUGERIDA:');
  console.log('-------------------------');
  console.log('‚Ä¢ Adicionar step de "inten√ß√£o" ap√≥s sele√ß√£o do sentimento principal');
  console.log('‚Ä¢ Modificar pesos dos subsentimentos baseado na inten√ß√£o');
  console.log('‚Ä¢ Filtrar g√™neros compat√≠veis/incompat√≠veis');
  console.log('‚Ä¢ Ajustar algoritmo de recomenda√ß√£o final');
}

async function main() {
  try {
    await testEmotionalIntentionSystem();
    await demonstrateJourneyIntegration();
  } catch (error) {
    console.error('Erro no teste:', error);
  } finally {
    await prisma.$disconnect();
  }
}

main(); 