import { createAIProvider, getDefaultConfig, AIProvider } from '../utils/aiProvider';
import * as dotenv from 'dotenv';

// Carregar vari√°veis de ambiente
dotenv.config();

async function testAIProviders() {
  // Verificar se as chaves est√£o carregadas
  console.log('üîë Verificando vari√°veis de ambiente...');
  console.log(`OpenAI Key: ${process.env.OPENAI_API_KEY ? '‚úÖ Configurada' : '‚ùå N√£o encontrada'}`);
  console.log(`Gemini Key: ${process.env.GEMINI_API_KEY ? '‚úÖ Configurada' : '‚ùå N√£o encontrada'}`);
  console.log(`DeepSeek Key: ${process.env.DEEPSEEK_API_KEY ? '‚úÖ Configurada' : '‚ùå N√£o encontrada'}`);
  console.log();
  console.log('üß™ === TESTE DE PROVEDORES DE IA ===\n');

  const testPrompt = `
Filme: "O Poderoso Chef√£o" (1972)
Sinopse: A hist√≥ria da fam√≠lia Corleone, uma das cinco fam√≠lias da m√°fia de Nova York.
G√™neros: Drama, Crime
Palavras-chave: fam√≠lia, poder, lealdade, tradi√ß√£o

Com base nessas informa√ß√µes, escreva uma reflex√£o curta, inspiradora e espec√≠fica sobre este filme, capturando sua ess√™ncia emocional e os temas principais da hist√≥ria.

A reflex√£o deve:
- Ter entre 20-35 palavras
- Ser inspiradora e envolvente
- Capturar o tom e tema espec√≠fico do filme
- Terminar com um ponto final
- N√£o repetir o nome do filme
- Conectar os temas principais com o impacto emocional
`;

  const systemPrompt = 'Voc√™ √© um cr√≠tico de cinema especializado em an√°lise emocional de filmes. Escreva reflex√µes concisas e inspiradoras que capturem a ess√™ncia emocional √∫nica de cada filme.';

  const providers: AIProvider[] = ['openai', 'gemini', 'deepseek'];

  for (const provider of providers) {
    console.log(`\nüîç Testando ${provider.toUpperCase()}:`);
    console.log('‚îÄ'.repeat(50));

    try {
      const config = getDefaultConfig(provider);
      const aiProvider = createAIProvider(config);

      const startTime = Date.now();
      const response = await aiProvider.generateResponse(systemPrompt, testPrompt, {
        temperature: 0.8,
        maxTokens: 120
      });
      const endTime = Date.now();

      if (response.success) {
        console.log(`‚úÖ Sucesso!`);
        console.log(`‚è±Ô∏è  Tempo de resposta: ${endTime - startTime}ms`);
        console.log(`üìù Resposta:`);
        console.log(`"${response.content}"`);
      } else {
        console.log(`‚ùå Erro: ${response.error}`);
      }
    } catch (error) {
      console.log(`‚ùå Erro inesperado: ${error}`);
    }
  }

  console.log('\nüéØ === COMPARA√á√ÉO CONCLU√çDA ===');
  console.log('\nPara usar um provedor espec√≠fico nos scripts:');
  console.log('‚Ä¢ OpenAI: npx ts-node orchestrator.ts --title="..." --ai-provider=openai');
  console.log('‚Ä¢ Gemini: npx ts-node orchestrator.ts --title="..." --ai-provider=gemini');
  console.log('‚Ä¢ DeepSeek: npx ts-node orchestrator.ts --title="..." --ai-provider=deepseek');
  console.log('\nOu definir a vari√°vel de ambiente:');
  console.log('‚Ä¢ export AI_PROVIDER=openai');
  console.log('‚Ä¢ export AI_PROVIDER=gemini');
  console.log('‚Ä¢ export AI_PROVIDER=deepseek');
}

if (require.main === module) {
  testAIProviders().catch(console.error);
} 