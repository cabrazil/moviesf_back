generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Movie {
  id                   String                @id @default(uuid())
  title                String                @unique
  year                 Int?
  director             String?
  genres               String[]
  streamingPlatforms   String[]
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  description          String?
  thumbnail            String?
  original_title       String?
  movieSentiments      MovieSentiment[]
  movieSuggestions     MovieSuggestion[]
  movieSuggestionFlows MovieSuggestionFlow[]
}

model EmotionalState {
  id               Int               @id @default(autoincrement())
  name             String            @unique
  description      String?
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  mainSentimentId  Int
  mainSentiment    MainSentiment     @relation(fields: [mainSentimentId], references: [id])
  journeySteps     JourneyStep[]
  movieSuggestions MovieSuggestion[]

  @@index([mainSentimentId])
}

model JourneyStep {
  id               String          @id @default(uuid())
  emotionalStateId Int
  order            Int
  question         String
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  stepId           String
  options          JourneyOption[]
  emotionalState   EmotionalState  @relation(fields: [emotionalStateId], references: [id])

  @@index([emotionalStateId])
}

model JourneyOption {
  id               Int               @id @default(autoincrement())
  journeyStepId    String
  text             String
  nextStepId       String?
  isFinal          Boolean           @default(false)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  journeyStep      JourneyStep       @relation(fields: [journeyStepId], references: [id])
  movieSuggestions MovieSuggestion[]

  @@index([journeyStepId])
}

model MovieSuggestion {
  id               Int            @id @default(autoincrement())
  movieId          String
  emotionalStateId Int
  reason           String
  relevance        Int            @default(1)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  journeyOptionId  Int
  emotionalState   EmotionalState @relation(fields: [emotionalStateId], references: [id])
  journeyOption    JourneyOption  @relation(fields: [journeyOptionId], references: [id])
  movie            Movie          @relation(fields: [movieId], references: [id])

  @@index([movieId])
  @@index([emotionalStateId])
  @@index([journeyOptionId])
}

model MainSentiment {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  description     String?
  keywords        String[]         @default([])
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  emotionalStates EmotionalState[]
  journeyFlow     JourneyFlow?
  movieSentiment  MovieSentiment[]
  subSentiments   SubSentiment[]
}

model SubSentiment {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  description     String?
  keywords        String[]         @default([])
  mainSentimentId Int
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  movieSentiment  MovieSentiment[]
  mainSentiment   MainSentiment    @relation(fields: [mainSentimentId], references: [id])

  @@index([mainSentimentId])
}

model MovieSentiment {
  movieId         String
  mainSentimentId Int
  subSentimentId  Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  mainSentiment   MainSentiment @relation(fields: [mainSentimentId], references: [id])
  movie           Movie         @relation(fields: [movieId], references: [id])
  subSentiment    SubSentiment  @relation(fields: [subSentimentId], references: [id])

  @@id([movieId, mainSentimentId, subSentimentId])
  @@index([mainSentimentId])
  @@index([subSentimentId])
}

model JourneyFlow {
  id              Int               @id @default(autoincrement())
  mainSentimentId Int               @unique
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  mainSentiment   MainSentiment     @relation(fields: [mainSentimentId], references: [id])
  steps           JourneyStepFlow[]
}

model JourneyStepFlow {
  id            Int                 @id @default(autoincrement())
  journeyFlowId Int
  stepId        String
  order         Int
  question      String
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  options       JourneyOptionFlow[]
  journeyFlow   JourneyFlow         @relation(fields: [journeyFlowId], references: [id])

  @@index([journeyFlowId])
}

model JourneyOptionFlow {
  id                Int                   @id @default(autoincrement())
  journeyStepFlowId Int
  optionId          String
  text              String
  nextStepId        String?
  isEndState        Boolean               @default(false)
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  journeyStepFlow   JourneyStepFlow       @relation(fields: [journeyStepFlowId], references: [id])
  movieSuggestions  MovieSuggestionFlow[]

  @@index([journeyStepFlowId])
}

model MovieSuggestionFlow {
  id                  Int               @id @default(autoincrement())
  journeyOptionFlowId Int
  movieId             String
  reason              String
  relevance           Int               @default(1)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  journeyOptionFlow   JourneyOptionFlow @relation(fields: [journeyOptionFlowId], references: [id])
  movie               Movie             @relation(fields: [movieId], references: [id])

  @@unique([journeyOptionFlowId, movieId], map: "movie_suggestion_flow_unique_constraint")
  @@index([journeyOptionFlowId])
  @@index([movieId])
}
