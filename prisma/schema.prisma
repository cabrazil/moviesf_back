generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "prisma"
}

model Movie {
  id                   String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title                String                @unique @db.VarChar(255)
  year                 Int?
  director             String?               @db.VarChar(255)
  genres               String[]
  streamingPlatforms   String[]
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  description          String?
  thumbnail            String?
  original_title       String?
  vote_average         Decimal?              @db.Decimal(3, 1)
  vote_count           Int?
  certification        String?               @db.VarChar(255)
  adult                Boolean?              @default(false)
  keywords             String[]
  genreIds             Int[]
  movieSentiments      MovieSentiment[]
  movieSuggestionFlows MovieSuggestionFlow[]

  @@index([title])
}

model Genre {
  id   Int    @id @default(autoincrement())
  name String @unique
}

model MainSentiment {
  id             Int              @id @default(autoincrement())
  name           String           @unique @db.VarChar(255)
  description    String?
  keywords       String[]         @default([])
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  journeyFlow    JourneyFlow?
  movieSentiment MovieSentiment[]
  subSentiments  SubSentiment[]
}

model SubSentiment {
  id              Int              @id @default(autoincrement())
  name            String           @unique @db.VarChar(255)
  description     String?
  keywords        String[]         @default([])
  mainSentimentId Int
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  movieSentiment  MovieSentiment[]
  mainSentiment   MainSentiment    @relation(fields: [mainSentimentId], references: [id])

  @@index([mainSentimentId])
}

model MovieSentiment {
  movieId         String        @db.Uuid
  mainSentimentId Int
  subSentimentId  Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  mainSentiment   MainSentiment @relation(fields: [mainSentimentId], references: [id])
  movie           Movie         @relation(fields: [movieId], references: [id])
  subSentiment    SubSentiment  @relation(fields: [subSentimentId], references: [id])

  @@id([movieId, mainSentimentId, subSentimentId])
  @@index([mainSentimentId])
  @@index([subSentimentId])
}

model JourneyFlow {
  id              Int               @id @default(autoincrement())
  mainSentimentId Int               @unique
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  mainSentiment   MainSentiment     @relation(fields: [mainSentimentId], references: [id])
  steps           JourneyStepFlow[]
}

model JourneyStepFlow {
  id            Int                 @id @default(autoincrement())
  journeyFlowId Int
  stepId        String              @db.VarChar(255)
  order         Int
  question      String
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  options       JourneyOptionFlow[]
  journeyFlow   JourneyFlow         @relation(fields: [journeyFlowId], references: [id])

  @@index([journeyFlowId])
}

model JourneyOptionFlow {
  id                Int                   @id @default(autoincrement())
  journeyStepFlowId Int
  optionId          String                @db.VarChar(255)
  text              String
  nextStepId        String?               @db.VarChar(255)
  isEndState        Boolean               @default(false)
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  journeyStepFlow   JourneyStepFlow       @relation(fields: [journeyStepFlowId], references: [id])
  movieSuggestions  MovieSuggestionFlow[]

  @@index([journeyStepFlowId])
}

model MovieSuggestionFlow {
  id                  Int               @id @default(autoincrement())
  journeyOptionFlowId Int
  movieId             String            @db.Uuid
  reason              String
  relevance           Int               @default(1)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  journeyOptionFlow   JourneyOptionFlow @relation(fields: [journeyOptionFlowId], references: [id])
  movie               Movie             @relation(fields: [movieId], references: [id])

  @@index([journeyOptionFlowId])
  @@index([movieId])
}

model GenreSubSentiment {
  id             Int      @id @default(autoincrement())
  genreId        Int
  subSentimentId Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([genreId, subSentimentId])
}

model JourneyOptionFlowSubSentiment {
  id                  Int      @id @default(autoincrement())
  journeyOptionFlowId Int
  subSentimentId      Int
  weight              Decimal  @default(1.0) @db.Decimal(3, 2)
  createdAt           DateTime @default(now())
  updatedAt           DateTime

  @@unique([journeyOptionFlowId, subSentimentId])
  @@index([journeyOptionFlowId])
  @@index([subSentimentId])
}
