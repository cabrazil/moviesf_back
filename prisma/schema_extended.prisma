generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "prisma"
}

// ===== MODELOS EXISTENTES (mantidos) =====

model Movie {
  id                   String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title                String                @unique @db.VarChar(255)
  year                 Int?
  director             String?               @db.VarChar(255)
  genres               String[]
  streamingPlatforms   String[]
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  description          String?
  thumbnail            String?
  original_title       String?
  vote_average         Decimal?              @db.Decimal(3, 1)
  vote_count           Int?
  certification        String?               @db.VarChar(255)
  adult                Boolean?              @default(false)
  keywords             String[]
  genreIds             Int[]
  runtime              Int?
  movieSentiments      MovieSentiment[]
  movieSuggestionFlows MovieSuggestionFlow[]
  // üÜï NOVA RELA√á√ÉO
  emotionalSuggestions EmotionalSuggestion[]

  @@index([title])
}

model Genre {
  id   Int    @id @default(autoincrement())
  name String @unique
}

model MainSentiment {
  id                    Int                     @id @default(autoincrement())
  name                  String                  @unique @db.VarChar(255)
  description           String?
  keywords              String[]                @default([])
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  journeyFlow           JourneyFlow?
  movieSentiment        MovieSentiment[]
  subSentiments         SubSentiment[]
  // üÜï NOVAS RELA√á√ïES
  emotionalIntentions   EmotionalIntention[]
  recommendationSessions RecommendationSession[]
}

model SubSentiment {
  id              Int              @id @default(autoincrement())
  name            String           @db.VarChar(255)
  description     String?
  keywords        String[]         @default([])
  mainSentimentId Int
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  movieSentiment  MovieSentiment[]
  mainSentiment   MainSentiment    @relation(fields: [mainSentimentId], references: [id])

  @@index([mainSentimentId])
}

model MovieSentiment {
  movieId         String        @db.Uuid
  mainSentimentId Int
  subSentimentId  Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  mainSentiment   MainSentiment @relation(fields: [mainSentimentId], references: [id])
  movie           Movie         @relation(fields: [movieId], references: [id])
  subSentiment    SubSentiment  @relation(fields: [subSentimentId], references: [id])

  @@id([movieId, mainSentimentId, subSentimentId])
  @@index([mainSentimentId])
  @@index([subSentimentId])
}

model JourneyFlow {
  id              Int               @id @default(autoincrement())
  mainSentimentId Int               @unique
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  mainSentiment   MainSentiment     @relation(fields: [mainSentimentId], references: [id])
  steps           JourneyStepFlow[]
}

model JourneyStepFlow {
  id            Int                 @id @default(autoincrement())
  journeyFlowId Int
  stepId        String              @db.VarChar(255)
  order         Int
  question      String
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  options       JourneyOptionFlow[]
  journeyFlow   JourneyFlow         @relation(fields: [journeyFlowId], references: [id])

  @@index([journeyFlowId])
}

model JourneyOptionFlow {
  id                Int                   @id @default(autoincrement())
  journeyStepFlowId Int
  optionId          String                @db.VarChar(255)
  text              String
  nextStepId        String?               @db.VarChar(255)
  isEndState        Boolean               @default(false)
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  journeyStepFlow   JourneyStepFlow       @relation(fields: [journeyStepFlowId], references: [id])
  movieSuggestions  MovieSuggestionFlow[]
  // üÜï NOVA RELA√á√ÉO
  userChoices       UserJourneyChoice[]

  @@index([journeyStepFlowId])
}

model MovieSuggestionFlow {
  id                  Int               @id @default(autoincrement())
  journeyOptionFlowId Int
  movieId             String            @db.Uuid
  reason              String
  relevance           Int               @default(1)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  journeyOptionFlow   JourneyOptionFlow @relation(fields: [journeyOptionFlowId], references: [id])
  movie               Movie             @relation(fields: [movieId], references: [id])

  @@index([journeyOptionFlowId])
  @@index([movieId])
}

model GenreSubSentiment {
  id             Int      @id @default(autoincrement())
  genreId        Int
  subSentimentId Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([genreId, subSentimentId])
}

model JourneyOptionFlowSubSentiment {
  id                  Int      @id @default(autoincrement())
  journeyOptionFlowId Int
  subSentimentId      Int
  weight              Decimal  @default(1.0) @db.Decimal(3, 2)
  createdAt           DateTime @default(now())
  updatedAt           DateTime

  @@unique([journeyOptionFlowId, subSentimentId])
  @@index([journeyOptionFlowId])
  @@index([subSentimentId])
}

// ===== üÜï NOVOS MODELOS PARA INTEN√á√ÉO EMOCIONAL =====

// Enum para tipos de inten√ß√£o emocional
enum IntentionType {
  PROCESS    // Processar/elaborar o sentimento atual
  TRANSFORM  // Mudar/transformar o estado emocional  
  MAINTAIN   // Manter o estado atual
  EXPLORE    // Explorar nuances do sentimento
}

// Configura√ß√µes de inten√ß√£o emocional por sentimento
model EmotionalIntention {
  id                    Int                     @id @default(autoincrement())
  mainSentimentId       Int
  intentionType         IntentionType
  description           String                  @db.Text
  preferredGenres       String[]                @default([])
  avoidGenres           String[]                @default([])
  emotionalTone         String                  @default("similar") // "similar", "contrasting", "progressive"
  subSentimentWeights   Json                    // JSON com pesos dos subsentimentos
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  mainSentiment         MainSentiment           @relation(fields: [mainSentimentId], references: [id])
  recommendationSessions RecommendationSession[]
  emotionalSuggestions  EmotionalSuggestion[]

  @@unique([mainSentimentId, intentionType])
  @@index([mainSentimentId])
  @@index([intentionType])
}

// Sess√µes de recomenda√ß√£o do usu√°rio
model RecommendationSession {
  id                    String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId                String?               @db.VarChar(255) // Opcional, pode ser an√¥nimo
  mainSentimentId       Int
  emotionalIntentionId  Int?
  sessionData           Json                  // Dados da sess√£o (contexto, prefer√™ncias tempor√°rias)
  startedAt             DateTime              @default(now())
  completedAt           DateTime?
  isActive              Boolean               @default(true)
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  mainSentiment         MainSentiment         @relation(fields: [mainSentimentId], references: [id])
  emotionalIntention    EmotionalIntention?   @relation(fields: [emotionalIntentionId], references: [id])
  journeyChoices        UserJourneyChoice[]
  emotionalSuggestions  EmotionalSuggestion[]

  @@index([userId])
  @@index([mainSentimentId])
  @@index([emotionalIntentionId])
  @@index([isActive])
}

// Escolhas do usu√°rio na jornada
model UserJourneyChoice {
  id                      String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  recommendationSessionId String                @db.Uuid
  journeyOptionFlowId     Int
  chosenAt                DateTime              @default(now())
  contextData             Json?                 // Dados de contexto da escolha
  createdAt               DateTime              @default(now())
  recommendationSession   RecommendationSession @relation(fields: [recommendationSessionId], references: [id])
  journeyOptionFlow       JourneyOptionFlow     @relation(fields: [journeyOptionFlowId], references: [id])

  @@index([recommendationSessionId])
  @@index([journeyOptionFlowId])
}

// Sugest√µes personalizadas baseadas em inten√ß√£o emocional
model EmotionalSuggestion {
  id                      String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  recommendationSessionId String                @db.Uuid
  emotionalIntentionId    Int
  movieId                 String                @db.Uuid
  personalizedReason      String                @db.Text // Raz√£o personalizada baseada na inten√ß√£o
  relevanceScore          Decimal               @db.Decimal(3, 2) // Score de relev√¢ncia (0.00 a 1.00)
  intentionAlignment      Decimal               @db.Decimal(3, 2) // Alinhamento com a inten√ß√£o (0.00 a 1.00)
  contextualFactors       Json?                 // Fatores contextuais considerados
  suggestedAt             DateTime              @default(now())
  wasViewed               Boolean               @default(false)
  wasAccepted             Boolean               @default(false)
  userFeedback            String?               // Feedback opcional do usu√°rio
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  recommendationSession   RecommendationSession @relation(fields: [recommendationSessionId], references: [id])
  emotionalIntention      EmotionalIntention    @relation(fields: [emotionalIntentionId], references: [id])
  movie                   Movie                 @relation(fields: [movieId], references: [id])

  @@index([recommendationSessionId])
  @@index([emotionalIntentionId])
  @@index([movieId])
  @@index([relevanceScore])
}

// ===== üÜï MODELO OPCIONAL PARA USU√ÅRIOS =====

model User {
  id                      String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                   String?                 @unique @db.VarChar(255)
  name                    String?                 @db.VarChar(255)
  preferences             Json?                   // Prefer√™ncias gerais do usu√°rio
  emotionalProfile        Json?                   // Perfil emocional baseado no hist√≥rico
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  
  @@index([email])
} 